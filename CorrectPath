Have the function CorrectPath(str) read the str parameter being passed, which will represent the movements made in a 5x5 grid of cells starting from the top left position. The characters in the input string will be entirely composed of: r, l, u, d, ?. Each of the characters stand for the direction to take within the grid, for example: r = right, l = left, u = up, d = down. Your goal is to determine what characters the question marks should be in order for a path to be created to go from the top left of the grid all the way to the bottom right without touching previously travelled on cells in the grid. 


import itertools
dirDic = {'r':(1,0), 'l':(-1,0), 'u':(0,-1), 'd':(0,1), '?':(0,0)}
def CorrectPath(strParam):
  
  x = sum([dirDic[x][0] for x in strParam])
  y = sum([dirDic[x][1] for x in strParam])
  missing = (4-x,4-y)


  unknown = strParam.count('?')
  allMoves = list(itertools.product('rlud', repeat=unknown))
  possMoves = []
  for path in allMoves:
    path = list(path)
    xPath = 0
    yPath = 0
    for move in path:
      xPath += dirDic[move][0]
      yPath += dirDic[move][1]
    if (xPath, yPath) == missing:
      possPath = ''
      for i in strParam:
        if i == '?':
          possPath += path.pop(0)
        else:
          possPath += i
      if tryMove(possPath):
        return possPath
  
  return possMoves


def tryMove(path):
  grid = [[None for i in range(5)] for j in range(5)]
  end = [4,4]
  pos = [0,0]
  grid[0][0] = 1
  for m in path:
    pos[0] += dirDic[m][0]
    pos[1] += dirDic[m][1]
    if pos[0] < 0 or pos[0] > 4: return False
    if pos[1] < 0 or pos[1] > 4: return False
    if grid[pos[0]][pos[1]]: return False
    grid[pos[0]][pos[1]] = 1
  if pos == end:
    return True


print(CorrectPath(input()))

